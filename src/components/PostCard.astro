---
// PostCard.astro - Displays a LinkedIn-style post

export interface Props {
  title: string;
  content: string;
  xValue: string;
  yValue: string;
  isNewlyGenerated?: boolean;
  permalink?: string;
}

const { title, content, xValue, yValue, isNewlyGenerated = false, permalink } = Astro.props;

// Split content into paragraphs for better rendering
const paragraphs = content.split('\n\n').filter(p => p.trim() !== '');

// Extract hashtags from the last paragraph
let hashtags = '';
let contentParagraphs = [...paragraphs];

if (paragraphs.length > 0 && paragraphs[paragraphs.length - 1].startsWith('#')) {
  hashtags = paragraphs[paragraphs.length - 1];
  contentParagraphs = paragraphs.slice(0, -1);
}

const shareUrl = permalink || Astro.url.href;
---

<div class="linkedin-card relative">
  {isNewlyGenerated && (
    <div class="absolute -top-2 -right-2 bg-green-500 text-white text-xs rounded-full px-2 py-1 shadow-md">
      New Generation
    </div>
  )}

  <h2 class="linkedin-post-title">What {xValue} taught me about {yValue}</h2>
  
  <div class="linkedin-post-content">
    {contentParagraphs.map((paragraph) => (
      <p class="mb-4">{paragraph}</p>
    ))}
    
    {hashtags && (
      <div class="linkedin-hashtags">
        {hashtags}
      </div>
    )}
  </div>
  
  <div class="mt-6 flex flex-wrap gap-2">
    <button 
      class="btn-secondary flex items-center gap-1 text-xs" 
      id="copy-btn"
      data-content={`What ${xValue} taught me about ${yValue}\n\n${content}`}
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
      </svg>
      Copy Text
    </button>
    
    <a 
      href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}`}
      target="_blank"
      rel="noopener noreferrer"
      class="btn-primary flex items-center gap-1 text-xs"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
        <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
      </svg>
      Share on LinkedIn
    </a>
    
    {permalink && (
      <a 
        href={permalink}
        class="btn-secondary flex items-center gap-1 text-xs"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
        </svg>
        Permalink
      </a>
    )}
  </div>
</div>

<script>
  // Handle copy functionality
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('#copy-btn');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const content = button.getAttribute('data-content');
        if (!content) return;
        
        try {
          await navigator.clipboard.writeText(content);
          const originalText = button.textContent;
          
          // Change button text to indicate success
          button.textContent = 'Copied!';
          button.classList.add('bg-green-500', 'text-white');
          button.classList.remove('bg-gray-100', 'text-gray-800');
          
          // Reset after 2 seconds
          setTimeout(() => {
            button.textContent = originalText;
            button.classList.remove('bg-green-500', 'text-white');
            button.classList.add('bg-gray-100', 'text-gray-800');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
        }
      });
    });
  });
</script>
