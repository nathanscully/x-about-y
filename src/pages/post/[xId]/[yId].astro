---
import Layout from '../../../layouts/Layout.astro';
import Post from '../../../components/Post.astro';
import { getXValueById, getYValueById, generatePostKey } from '../../../lib/utils';
import { generatePost } from '../../../lib/openai';

// Get route parameters
const { xId, yId } = Astro.params;

// Get X and Y values
const xValue = xId ? getXValueById(xId) : null;
const yValue = yId ? getYValueById(yId) : null;

// Debug the retrieved values
console.log("xValue:", xValue);
console.log("yValue:", yValue);
console.log("xValue emoji (JSON):", JSON.stringify(xValue?.emoji));
console.log("yValue emoji (JSON):", JSON.stringify(yValue?.emoji));

// Handle invalid parameters
if (!xValue || !yValue) {
  return Astro.redirect('/404', 302);
}

// Get KV namespaces from runtime environment
const { XABOUTY_POSTS, XABOUTY_GENERATION_COUNTER, OPENAI_API_KEY } = Astro.locals.runtime.env;
console.log(Astro.locals.runtime.env)
// Create KV key for this post
const postKey = generatePostKey(xId!, yId!);

// Try to get post from KV store
let postData;
let isNewlyGenerated = false;

try {
  // Check if post exists in KV store
  postData = await XABOUTY_POSTS.get(postKey, 'json');
  
  // If not found, generate a new post
  if (!postData) {
    const { post } = await generatePost(xValue, yValue, OPENAI_API_KEY);
  
    // Set post data
    postData = {
      content: post.content,
      xValue: xValue.activity,
      yValue: yValue.concept,
      createdAt: new Date().toISOString()
    };
    
    // Save to KV store
    await XABOUTY_POSTS.put(postKey, JSON.stringify(postData));
    
    isNewlyGenerated = true;
  }
} catch (error) {
  console.error('Error getting/generating post:', error);
  
  // Fallback content if we can't generate
  postData = {
    content: `This is a sample post about what ${xValue.activity} taught me about ${yValue.concept}. The content couldn't be generated due to an error.`,
    xValue: xValue.activity,
    yValue: yValue.concept,
    createdAt: new Date().toISOString()
  };
}

// Page title and description
const title = `What ${xValue.activity} ${xValue.emoji} taught me about ${yValue.concept} ${yValue.emoji} | X about Y`;
const description = `A satirical LinkedIn post about what ${xValue.activity} ${xValue.emoji} taught me about ${yValue.concept} ${yValue.emoji}.`;
---

<Layout title={title} description={description}>  
  <main class="container mx-auto px-6 pt-8 pb-20">
    <Post 
      xActivity={xValue.activity} 
      yConcept={yValue.concept}
      content={postData.content}
      xEmoji={xValue.emoji}
      yEmoji={yValue.emoji}
    />
  </main>
</Layout> 