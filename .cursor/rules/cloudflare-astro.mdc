---
description: 
globs: 
alwaysApply: true
---
# Deploying Astro Sites on Cloudflare Pages

Astro is a web framework focused on building fast, content-focused websites with zero JavaScript runtime code by default. This guide outlines how to deploy an Astro application on Cloudflare Pages.

## Setting up a New Project

Use `create-cloudflare` to scaffold a new Astro project:

```bash
npm create cloudflare@latest -- my-astro-app --framework=astro
# or
pnpm create cloudflare@latest my-astro-app --framework=astro
# or
yarn create cloudflare my-astro-app --framework=astro
```

The CLI will prompt you to select a project type and whether to initialize a Git repository. It's recommended to initialize the Git repository manually as described later.

## Astro Configuration for Cloudflare Pages

To deploy an Astro SSR (Server-side Rendered) site, add the `@astrojs/cloudflare` adapter:

```bash
npm run astro add cloudflare
```

## Creating a GitHub Repository

1.  Create a new GitHub repository at [repo.new](mdc:https:/repo.new).
2.  Initialize a local Git repository, add the remote origin, and push your application:

```bash
git init
git remote add origin https://github.com/<your-gh-username>/<repository-name>
git add .
git commit -m "Initial commit"
git branch -M main
git push -u origin main
```

## Deploying with Cloudflare Pages

### Via `create-cloudflare` CLI (C3)

If you used `create-cloudflare` to create your project, it will prompt you to deploy via the CLI after installing dependencies.

### Via the Cloudflare Dashboard

1.  Log in to the [Cloudflare dashboard](mdc:https:/dash.cloudflare.com) and select your account.
2.  Go to **Workers & Pages** > **Create** > **Pages** > **Connect to Git**.
3.  Select your GitHub repository and click **Begin setup**.
4.  In **Build settings**, choose "Astro" as the **Framework preset**. This will pre-populate the following settings:

    *   **Production branch**: `main`
    *   **Build command**: `npm run build`
    *   **Build directory**: `dist`
5.  Optionally, customize the **Project name**.
6.  Click **Save and Deploy**.

Cloudflare Pages will automatically rebuild and deploy your project on every new commit. Preview deployments are available for pull requests.

## Local Runtime

Enable local runtime support via the `platformProxy` option in your `astro.config.mjs` or `astro.config.ts`:

```javascript
import { defineConfig } from "astro/config";
import cloudflare from "@astrojs/cloudflare";

export default defineConfig({
  adapter: cloudflare({
    platformProxy: {
      enabled: true,
    },
  }),
});
```

## Using Bindings in Astro

Bindings allow your application to interact with Cloudflare developer products like KV, Durable Objects, R2, and D1. Access bindings in Astro components and API routes using `context.locals` from Astro Middleware.

### Example: Accessing a KV Namespace

1.  **Update `env.d.ts` to define Cloudflare runtime and KV type:**

```typescript
/// <reference types="astro/client" />
type KVNamespace = import("@cloudflare/workers-types").KVNamespace;
type ENV = {
  // replace `MY_KV` with your KV namespace
  MY_KV: KVNamespace;
};
// use a default runtime configuration (advanced mode).
type Runtime = import("@astrojs/cloudflare").Runtime<ENV>;
declare namespace App {
  interface Locals extends Runtime {}
}
```

2.  **Access KV from an API endpoint:**

```typescript
import type { APIContext } from "astro";

export async function get({ locals }: APIContext) {
  // the type KVNamespace comes from the @cloudflare/workers-types package
  const { MY_KV } = locals.runtime.env;

  return {
    // ...
  };
}
```

3.  **Use bindings directly from Astro components:**

```astro
---
const myKV = Astro.locals.runtime.env.MY_KV;
const value = await myKV.get("key");
---

<div>{value}</div>
```
